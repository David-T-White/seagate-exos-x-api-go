/*
Seagate Management Controller (MC) OpenAPI

This API allows users to interact through the MC API to provision and manage storage.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ShowMapsInitiatorNamesGet200Response - struct for ShowMapsInitiatorNamesGet200Response
type ShowMapsInitiatorNamesGet200Response struct {
	HostGroupViewObject *HostGroupViewObject
	HostsViewObject     *HostsViewObject
	InitiatorViewObject *InitiatorViewObject
	StatusObject        *StatusObject
}

// HostGroupViewObjectAsShowMapsInitiatorNamesGet200Response is a convenience function that returns HostGroupViewObject wrapped in ShowMapsInitiatorNamesGet200Response
func HostGroupViewObjectAsShowMapsInitiatorNamesGet200Response(v *HostGroupViewObject) ShowMapsInitiatorNamesGet200Response {
	return ShowMapsInitiatorNamesGet200Response{
		HostGroupViewObject: v,
	}
}

// HostsViewObjectAsShowMapsInitiatorNamesGet200Response is a convenience function that returns HostsViewObject wrapped in ShowMapsInitiatorNamesGet200Response
func HostsViewObjectAsShowMapsInitiatorNamesGet200Response(v *HostsViewObject) ShowMapsInitiatorNamesGet200Response {
	return ShowMapsInitiatorNamesGet200Response{
		HostsViewObject: v,
	}
}

// InitiatorViewObjectAsShowMapsInitiatorNamesGet200Response is a convenience function that returns InitiatorViewObject wrapped in ShowMapsInitiatorNamesGet200Response
func InitiatorViewObjectAsShowMapsInitiatorNamesGet200Response(v *InitiatorViewObject) ShowMapsInitiatorNamesGet200Response {
	return ShowMapsInitiatorNamesGet200Response{
		InitiatorViewObject: v,
	}
}

// StatusObjectAsShowMapsInitiatorNamesGet200Response is a convenience function that returns StatusObject wrapped in ShowMapsInitiatorNamesGet200Response
func StatusObjectAsShowMapsInitiatorNamesGet200Response(v *StatusObject) ShowMapsInitiatorNamesGet200Response {
	return ShowMapsInitiatorNamesGet200Response{
		StatusObject: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ShowMapsInitiatorNamesGet200Response) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string][]map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'host-group-view'
	if _, ok := jsonDict["host-group-view"]; ok {
		// try to unmarshal JSON data into HostGroupViewObject
		err = json.Unmarshal(data, &dst.HostGroupViewObject)
		if err == nil {
			return nil // data stored in dst.HostGroupViewObject, return on the first match
		} else {
			dst.HostGroupViewObject = nil
			return fmt.Errorf("failed to unmarshal ShowMapsInitiatorNamesGet200Response as HostGroupViewObject: %s", err.Error())
		}
	}

	// check if the discriminator value is 'host-group-viewObject'
	if _, ok := jsonDict["host-group-viewObject"]; ok {
		// try to unmarshal JSON data into HostGroupViewObject
		err = json.Unmarshal(data, &dst.HostGroupViewObject)
		if err == nil {
			return nil // data stored in dst.HostGroupViewObject, return on the first match
		} else {
			dst.HostGroupViewObject = nil
			return fmt.Errorf("failed to unmarshal ShowMapsInitiatorNamesGet200Response as HostGroupViewObject: %s", err.Error())
		}
	}

	// check if the discriminator value is 'hosts-view'
	if _, ok := jsonDict["hosts-view"]; ok {
		// try to unmarshal JSON data into HostsViewObject
		err = json.Unmarshal(data, &dst.HostsViewObject)
		if err == nil {
			return nil // data stored in dst.HostsViewObject, return on the first match
		} else {
			dst.HostsViewObject = nil
			return fmt.Errorf("failed to unmarshal ShowMapsInitiatorNamesGet200Response as HostsViewObject: %s", err.Error())
		}
	}

	// check if the discriminator value is 'hosts-viewObject'
	if _, ok := jsonDict["hosts-viewObject"]; ok {
		// try to unmarshal JSON data into HostsViewObject
		err = json.Unmarshal(data, &dst.HostsViewObject)
		if err == nil {
			return nil // data stored in dst.HostsViewObject, return on the first match
		} else {
			dst.HostsViewObject = nil
			return fmt.Errorf("failed to unmarshal ShowMapsInitiatorNamesGet200Response as HostsViewObject: %s", err.Error())
		}
	}

	// check if the discriminator value is 'initiator-view'
	if _, ok := jsonDict["initiator-view"]; ok {
		// try to unmarshal JSON data into InitiatorViewObject
		err = json.Unmarshal(data, &dst.InitiatorViewObject)
		if err == nil {
			return nil // data stored in dst.InitiatorViewObject, return on the first match
		} else {
			dst.InitiatorViewObject = nil
			return fmt.Errorf("failed to unmarshal ShowMapsInitiatorNamesGet200Response as InitiatorViewObject: %s", err.Error())
		}
	}

	// check if the discriminator value is 'initiator-viewObject'
	if _, ok := jsonDict["initiator-viewObject"]; ok {
		// try to unmarshal JSON data into InitiatorViewObject
		err = json.Unmarshal(data, &dst.InitiatorViewObject)
		if err == nil {
			return nil // data stored in dst.InitiatorViewObject, return on the first match
		} else {
			dst.InitiatorViewObject = nil
			return fmt.Errorf("failed to unmarshal ShowMapsInitiatorNamesGet200Response as InitiatorViewObject: %s", err.Error())
		}
	}

	// check if the discriminator value is 'status'
	if _, ok := jsonDict["status"]; ok {
		// try to unmarshal JSON data into StatusObject
		err = json.Unmarshal(data, &dst.StatusObject)
		if err == nil {
			return nil // data stored in dst.StatusObject, return on the first match
		} else {
			dst.StatusObject = nil
			return fmt.Errorf("failed to unmarshal ShowMapsInitiatorNamesGet200Response as StatusObject: %s", err.Error())
		}
	}

	// check if the discriminator value is 'statusObject'
	if _, ok := jsonDict["statusObject"]; ok {
		// try to unmarshal JSON data into StatusObject
		err = json.Unmarshal(data, &dst.StatusObject)
		if err == nil {
			return nil // data stored in dst.StatusObject, return on the first match
		} else {
			dst.StatusObject = nil
			return fmt.Errorf("failed to unmarshal ShowMapsInitiatorNamesGet200Response as StatusObject: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ShowMapsInitiatorNamesGet200Response) MarshalJSON() ([]byte, error) {
	if src.HostGroupViewObject != nil {
		return json.Marshal(&src.HostGroupViewObject)
	}

	if src.HostsViewObject != nil {
		return json.Marshal(&src.HostsViewObject)
	}

	if src.InitiatorViewObject != nil {
		return json.Marshal(&src.InitiatorViewObject)
	}

	if src.StatusObject != nil {
		return json.Marshal(&src.StatusObject)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ShowMapsInitiatorNamesGet200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.HostGroupViewObject != nil {
		return obj.HostGroupViewObject
	}

	if obj.HostsViewObject != nil {
		return obj.HostsViewObject
	}

	if obj.InitiatorViewObject != nil {
		return obj.InitiatorViewObject
	}

	if obj.StatusObject != nil {
		return obj.StatusObject
	}

	// all schemas are nil
	return nil
}

type NullableShowMapsInitiatorNamesGet200Response struct {
	value *ShowMapsInitiatorNamesGet200Response
	isSet bool
}

func (v NullableShowMapsInitiatorNamesGet200Response) Get() *ShowMapsInitiatorNamesGet200Response {
	return v.value
}

func (v *NullableShowMapsInitiatorNamesGet200Response) Set(val *ShowMapsInitiatorNamesGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableShowMapsInitiatorNamesGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableShowMapsInitiatorNamesGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShowMapsInitiatorNamesGet200Response(val *ShowMapsInitiatorNamesGet200Response) *NullableShowMapsInitiatorNamesGet200Response {
	return &NullableShowMapsInitiatorNamesGet200Response{value: val, isSet: true}
}

func (v NullableShowMapsInitiatorNamesGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShowMapsInitiatorNamesGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
